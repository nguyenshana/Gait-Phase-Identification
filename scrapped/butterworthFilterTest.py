import timeimport pandasfrom pandas import DataFrameimport matplotlib.pyplot as pltfrom scipy import signalimport numpy as npimport math# arbitrary values I assume to be impossiblepreviousAngularVelocity = -1000.0previousDifference = -1000.0MSW = 0HS = 0TO = 1startTime = 0data = { 	'MSW': {'MSW Row': [], 'MSW Time' : [], 'MSW Angular Velocity' : []},    'HS' : {'HS Row': [], 'HS Time' : [], 'HS Angular Velocity' : []},    'TO' : {'TO Row': [], 'TO Time' : [], 'TO Angular Velocity' : []}}# dataset to hold all excel valuesallexcel = { 'row' : [], 'value' : [] }# Participant information below# Frequency at which data is taken:# Participant 4 = 60 Hz# Participant 14 = 60 Hz# Participant 28 = 100HzrowValues = { 'p401': 400, 'p402' : 400,              'p1401' : 50, 'p1402' : 150,              'p2801' : 520, 'p2802' : 700 }typicalColumnName = 'Right Lower Leg z'colNames = {	'p401' : typicalColumnName,	'p402' : typicalColumnName,	'p401CalculatedColumnName' : 'Right Lower Leg Angular Velocity (calculated)',	'p402CalculatedColumnName' : 'Right Lower Leg Angular Velocity (calculated)',	'p1401' : 'Right Lower Leg Angular Velocity (from radians)',	'p1402' : 'Right Lower Leg Angular Velocity (from radians)',	'p2801' : typicalColumnName,	'p2802' : typicalColumnName}pathToFolder = '/Users/shana/Desktop/DesktopItems/BIOFEEDBACK/data/'filePaths = {	'p401' : pathToFolder + 'Participant004-001.xlsx', 	'p402' : pathToFolder + 'Participant004-002.xlsx',	'p1401' : pathToFolder + 'F014-001--Calculated_AV.xlsx',	'p1402' : pathToFolder + 'F014-002--Calculated_AV.xlsx',	'p2801' : pathToFolder + 'Participant028-001.xlsx',	'p2802' : pathToFolder + 'Participant028-002.xlsx'}lastRow = {	'p401' : 2769, 'p402' : 2769,	'p1401' : 1136, 'p1402' : 845,	'p2801' : 3800, 'p2802' : 4000}row = None;columnName = None;inputLength = 0;excel_data_df = None;# Input example: 'p401'def setParticipant(participant):    global row    row = rowValues[participant]    global columnName     columnName = colNames[participant]        #Columns are indexed from zero    global excel_data_df    if (participant != 'p1401' or participant != 'p1402') :        excel_data_df = pandas.read_excel(filePaths[participant], sheet_name='Segment Angular Velocity', usecols=[51])    else:        excel_data_df = pandas.read_excel(filePaths[participant], sheet_name='Segment Angular Velocity', usecols=[4])    global inputLength    inputLength = lastRow[participant]person = 'p401'setParticipant(person)'''# Muskan's codeataset= xlsread('data.xlsx', 'Sheet1', 'A1:B1138')fs=60% sampling frequency fc=10% cutoff frequency dlen = length(dataset)t1=[1:dlen]/fs%converting timeframes to secondst=dataset(:,1)%take entire row and first columnav=dataset(:,2)%take entire row and second column% nndata=datan/max(dataset(:,2)) %normalized​figure %creates plot on a seperate windowplot(t,av)%plot av vs time (frames)ylim([-3000 3000])ylabel('degree/s')xlabel('frames')title('Original av signal')​figure% [b,a]=butter(2,fc/(fs/2));[b,a]=butter(2,0.2); %b=filter oder, a=cutoff freqfilt=filter(b,a,av);%apply filter on orignal av signalplot(t,filt)title('2nd order butterworth filter applied to original')​figure %moving window average(mw) filterw=4 %number of windows you want to samplebmw = ones(w,1)/w;%from mathworksamw=[1]mwav= filter(bmw, amw, av)%apply mw avg. filter on original av signalplot(t, mwav)title('moving window average filter applied to original')​figure %moving window average(mw) filterw=4 %number of windows you want to samplebmw = ones(w,1)/w;%from mathworksamw=[1]mwav= filter(bmw, amw, av)%apply mw avg. filter on butterworth filtered signalplot(t, filt)%may experience delay..title('moving window average filter applied to butterworth filtered signal')​figure %this plots butterworth filtered signal over the orginal av signalplot(t,[av filt])legend('av signal', 'butterworth filtered signal')%ylim([-5000 5000])title('orginal vs butterworth filter')'''originalRow = rowprint("inputLength = ", inputLength)while(row < inputLength):        angularVelocity = excel_data_df[columnName].iloc[row] * 180 / math.pi        allexcel['row'].append(row)    allexcel['value'].append(angularVelocity)        row += 1    row = originalRow    def getRegular(participant):    plt.figure        rows = np.array(allexcel['row'])    velocities = np.array(allexcel['value'])        plt.plot(rows, velocities)    plt.title(participant)#relies on global variable allexceldef getButterworth(participant):    plt.figure        rows = np.array(allexcel['row'])    velocities = np.array(allexcel['value'])        #b,a = signal.butter(2,fc/(fs/2));    b,a = signal.butter(2, 0.2); # b=filter oder, a=cutoff freq    filt = signal.lfilter(b,a,velocities) #apply filter on orignal av signal    plt.plot(rows, filt)    plt.title(participant + ' - 2nd order butterworth')        print(filt)        print("data length = ", len(velocities), " butter length = ", len(filt))        return filt    '''w=4 %number of windows you want to samplebmw = ones(w,1)/w;%from mathworksamw=[1]mwav= filter(bmw, amw, av)%apply mw avg. filter on original av signalplot(t, mwav)title('moving window average filter applied to original')'''def getMovingWindowAverage(participant, windowSample):    plt.figure        rows = np.array(allexcel['row'])    velocities = np.array(allexcel['value'])        bmw = np.ones(windowSample)    amw = [1]    mwav = signal.lfilter(bmw, amw, velocities)    plt.plot(rows, mwav)    plt.title(participant + ' - moving window average filter')        print(mwav)        return mwav        def calculate80msToRow(frequency):    return 0.08 * frequencydef calculate300msToRow(frequency):    return 0.3 * frequency        def getGaitEvents(velocityArray,                   actualStartRow,                   arrayLength,                  previousAngularVelocity,                   previousDifference,                   HS, TO, MSW,                   frequency,                  waitRow80,                  waitRow300):        startTime = 0    row = 0    while (row < arrayLength):            row += 1            angularVelocity = velocityArray[row]                if previousAngularVelocity == -1000 :            previousAngularVelocity = angularVelocity            continue            elif previousDifference == -1000 :            previousDifference = angularVelocity - previousAngularVelocity            previousAngularVelocity = angularVelocity            continue                difference = angularVelocity - previousAngularVelocity                # add condition for MSW != 0?         # article version:         # find max         if(previousDifference > 0 and difference < 0 and TO == 1) :        # my version (for miscalculated ang vel):         # if(TO == 1) :            # article version without prevAV > 100:            if(angularVelocity > 100 or previousAngularVelocity > 100) :            # my version:            #if(angularVelocity < -150) :            #if(angularVelocity > 100 or previousAngularVelocity > 100) :            #if angularVelocity > 100 or previousAngularVelocity > 100 :                data['MSW']['MSW Row'].append(row + actualStartRow - 1)                data['MSW']['MSW Time'].append((row + actualStartRow - 1)*((1/frequency)))                data['MSW']['MSW Angular Velocity'].append(previousAngularVelocity)                                    # added this myself                MSW = 1                TO = 0                previousAngularVelocity = angularVelocity                previousDifference = difference                continue                # finds a minima        if previousDifference < 0 and difference > 0 :                        # article version:            if MSW == 1 and angularVelocity < 0 :            # if MSW == 1 :                minimaRow = row                minima = angularVelocity                # startTime = time.time() # time is in ns                startCount = row                # article: 100 hertz ; 80 ms                # 60 hz = 60 frames/sec = 0.016666... sec/frame                # 80 ms = 0.08 sec                # 0.08/0.0166 = 4.8 = around 5 rows                #while ( (time.time() * 1000) - (startTime * 1000) ) < 80 :                #                                # this is the 80ms loop                #                # if ((time.time() * 1000) - (startTime * 1000)) <= 80 :                #                '''                80 ms                previous minima                max closer to it                then the next 'minima' is below the maxima & negative slope (so when it turns back to increasing)                '''                foundMinima = False                while row - startCount < waitRow80 and not foundMinima:                                        row += 1                                        angularVelocity = velocityArray[row]                    difference = angularVelocity - previousAngularVelocity                                                # if a minima                    if previousDifference < 0 and difference > 0 :                        minimaRow = row                        minima = angularVelocity                                        # if any maxima in 80 ms window and magnitude diff <= 10                    if previousDifference > 0 and difference < 0 and angularVelocity - minima <= 10 :                        # Code add here: immediate minima = HS                                #                        #while ( excel_data_df['Right Lower Leg z'].iloc[row]  * (180/math.pi) )< possibleMaxima and time <= 80 :                        #                        # search for immediate minima, previous diff is negative and diff is positive                        maxima = angularVelocity                        while not foundMinima and row - startCount < waitRow80 :                            # wait for next input = increase row                                                        previousAngularVelocity = angularVelocity                            previousDifference = difference                                                        row += 1                            angularVelocity = velocityArray[row]                            difference = angularVelocity - previousAngularVelocity                                                        if previousDifference < 0 and difference > 0 :                                minimaRow = row                                minima = angularVelocity                                foundMinima = True                                            previousAngularVelocity = angularVelocity                    previousDifference = difference                    #                # 80 ms interval ended                #                                # Code add here: previous angular velocity = HS                # aka for my code: minima = HS                data['HS']['HS Row'].append(minimaRow + actualStartRow)                data['HS']['HS Time'].append((minimaRow + actualStartRow)*(1/frequency))                data['HS']['HS Angular Velocity'].append(minima)                    MSW = 0                    #added this myself                HS = 1                #                #startTime = time.time() # time is in ns                #                startTime = row                previousAngularVelocity = angularVelocity                previousDifference = difference                continue                    else:                #                #currentTimeMiliSec = (time.time() * 1000) - (startTime * 1000)                #                currentTime = row - startTime                #                #if HS == 1 and angularVelocity < -20 and currentTimeMiliSec > 300 :                #                # 300 ms = 0.3 sec                # 0.3/0.01666 = 18.07                #                 # article version has AV < -20 while I used -50:                if HS == 1 and angularVelocity < -50 and currentTime > waitRow300 :                # my version:                #if HS == 1 and previousAngularVelocity > 0 and angularVelocity < 0 and currentTime > 18:                    HS = 0                    TO = 1                    # add here: previousAngularVelocity = TO                    data['TO']['TO Row'].append(row + actualStartRow - 1)                    data['TO']['TO Time'].append((row + actualStartRow - 1)*((1/frequency)))                    data['TO']['TO Angular Velocity'].append(previousAngularVelocity)                        previousAngularVelocity = angularVelocity                    previousDifference = difference                    continue                                                    previousAngularVelocity = angularVelocity        previousDifference = difference                    MSWdf = DataFrame(data['MSW'],columns=['MSW Row', 'MSW Time', 'MSW Angular Velocity'])    print (MSWdf)        HSdf = DataFrame(data['HS'],columns=[ 'HS Row', 'HS Time', 'HS Angular Velocity'])    print (HSdf)        TOdf = DataFrame(data['TO'],columns=[ 'TO Row', 'TO Time', 'TO Angular Velocity'])    print (TOdf)            fig=plt.figure()    ax=fig.add_axes([0,0,1,1])    # ax.scatter(allexcel['row'], allexcel['value'], color='r')    ax.scatter(data['MSW'][ 'MSW Time'], data['MSW']['MSW Angular Velocity'], color='r')    ax.scatter(data['HS'][ 'HS Time'], data['HS']['HS Angular Velocity'], color='b')    ax.scatter(data['TO'][ 'TO Time'], data['TO']['TO Angular Velocity'], color='g')        ax.set_xlabel('Time')    ax.set_ylabel('AngularVelocity')    #ax.set_title('14-02 (actual data): MSW  < -150 + HS difference is > 0 + TO is < 0 while prev > 0')    ax.set_title('4-01 with OG code w/ MSW prevAV > 100 and TO < -50')    plt.show()    exceldata = DataFrame(allexcel,columns=['row', 'value'])print(exceldata)#getButterworth(person)#getMovingWindowAverage(person, 4)getGaitEvents(getButterworth(person),                   row,                   inputLength - row - 1,                  previousAngularVelocity,                   previousDifference,                   HS, TO, MSW,                   60,                  calculate80msToRow(60),                  calculate300msToRow(60))'''plt.plot(allexcel['row'], filtered)plt.xlabel('Time')plt.ylabel('AngularVelocity')#ax.set_title('14-02 (actual data): MSW  < -150 + HS difference is > 0 + TO is < 0 while prev > 0')plt.title('4-01 w/ maybe filter')plt.show()'''